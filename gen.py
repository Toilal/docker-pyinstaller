#!/usr/bin/env python3
import os
import re
import stat

BASEVERSION = re.compile(
    r"""[vV]?
        (?P<major>0|[1-9]\d*)
        (\.
        (?P<minor>0|[1-9]\d*)
        (\.
            (?P<patch>0|[1-9]\d*)
        )?
        )?
    """,
    re.VERBOSE,
)


def coerce_version(version):
    match = BASEVERSION.search(version)
    if not match:
        return (None, version)

    ver = {
        key: 0 if value is None else int(value) for key, value in match.groupdict().items()
    }
    rest = match.string[match.end():]  # noqa:E203
    return ver, rest


_pyinstaller_version = (
    ('4.0', ''),
    ('3.6',)
)

_python_version = (
    ('3.7.9', '3.7', '3', ''),
    ('2.7.17', '2.7', '2'),
    ('3.3.7', '3.3'),
    ('3.4.10', '3.4'),
    ('3.5.9', '3.5'),
    ('3.6.12', '3.6'),
    ('3.8.5', '3.8')
)

_base_image = (
    ('xenial', 'ubuntu16.04', ''),
    ('focal', 'ubuntu20.04'),
    ('bionic', 'ubuntu18.04'),
    ('trusty', 'ubuntu14.04'),
    ('precise', 'ubuntu12.04')
)

_arch = (
    ('amd64', ''),
    ('i386',),
    ('win64',),
    ('win32',)
)


def combinations():
    for pyinstaller_version_tuple in _pyinstaller_version:
        for python_version_tuple in _python_version:
            for base_image_tuple in _base_image:
                for arch_tuple in _arch:
                    yield pyinstaller_version_tuple, python_version_tuple, base_image_tuple, arch_tuple


def main():
    build_file = None
    push_file = None
    try:
        build_file = open('build.sh', mode='w', encoding='ascii')
        push_file = open('push.sh', mode='w', encoding='ascii')

        header = """#!/bin/sh
# This file is generated by gen.py. Do not edit manually.
set -e

NAMESPACE=${NAMESPACE-toilal}
DOCKER_BUILD_OPTS=${DOCKER_BUILD_OPTS---pull}
"""
        print(header, file=build_file)
        print(header, file=push_file)

        for pyinstaller_version_tuple, python_version_tuple, base_image_tuple, arch_tuple in combinations():
            dockerfile = get_dockerfile(
                pyinstaller_version_tuple[0],
                python_version_tuple[0],
                base_image_tuple[0],
                arch_tuple[0]
            )
            if not dockerfile:
                continue

            build_args = get_build_args(
                pyinstaller_version_tuple[0],
                python_version_tuple[0],
                base_image_tuple[0],
                arch_tuple[0]
            )

            repr_args = []
            for build_arg_key, build_arg_value in build_args.items():
                repr_args.append("%s=%s" % (build_arg_key, build_arg_value))

            print("echo \"Build %s (%s)\"" % (dockerfile, ' '.join(repr_args)), file=build_file)
            print("echo \"Push %s (%s)\"" % (dockerfile, ' '.join(repr_args)), file=push_file)
            print("docker build $DOCKER_BUILD_OPTS -f %s" % (dockerfile,), end="", file=build_file)

            for build_arg_key, build_arg_value in build_args.items():
                print(" --build-arg \"%s=%s\"" % (build_arg_key, build_arg_value), end="", file=build_file)

            for image, tag_items in image_and_tag_items(pyinstaller_version_tuple,
                                                        python_version_tuple,
                                                        base_image_tuple,
                                                        arch_tuple):
                print(" \\", file=build_file)
                tag = '-'.join(tag_items)
                if tag:
                    print("  -t %s:%s" % (image, tag), end="", file=build_file)
                    print("docker push %s:%s" % (image, tag), file=push_file)
                else:
                    print("  -t %s" % (image,), end="", file=build_file)
                    print("docker push %s" % (image,), file=push_file)
            print(" \\", file=build_file)
            print("  .", file=build_file)
            print(file=build_file)
            print(file=push_file)
    finally:
        if build_file:
            build_file.close()
        if push_file:
            push_file.close()

    st = os.stat('build.sh')
    os.chmod('build.sh', st.st_mode | stat.S_IEXEC)

    st = os.stat('push.sh')
    os.chmod('push.sh', st.st_mode | stat.S_IEXEC)


def get_dockerfile(pyinstaller_version, python_version, base_image, arch):
    pyinstaller_semver, _ = coerce_version(pyinstaller_version)
    python_semver, _ = coerce_version(python_version)

    if pyinstaller_semver['major'] >= 4:
        if python_semver['major'] < 3:
            return None
        if python_semver['major'] == 3 and python_semver['minor'] < 5:
            return None

    dockerfile = "Dockerfile-py%s-%s-%s" % (python_semver['major'], base_image, arch)
    if not os.path.exists(dockerfile):
        return None
    return dockerfile


def get_build_args(pyinstaller_version, python_version, base_image, arch):
    return {
        'PYINSTALLER_VERSION': pyinstaller_version,
        'PYTHON_VERSION': python_version
    }


def image_and_tag_items(pyinstaller_version_tuple, python_version_tuple, base_image_tuple, arch_tuple):
    for pyinstaller_version in pyinstaller_version_tuple:
        for base_image in base_image_tuple:
            for python_version in python_version_tuple:
                image = '$NAMESPACE/pyinstaller-windows' if arch_tuple[0].startswith(
                    'win') else '$NAMESPACE/pyinstaller-linux'
                bits_tuple = ('64bits', '') if '64' in arch_tuple[0] else ('32bits',)
                for bits in bits_tuple:
                    tag_items = list((x for x in (
                        pyinstaller_version,
                        'python' + python_version if python_version else '',
                        bits,
                        base_image) if x))
                    yield image, tag_items


if __name__ == '__main__':
    main()
